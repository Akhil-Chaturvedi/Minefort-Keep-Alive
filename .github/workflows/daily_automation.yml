name: Daily Minefort Keep-Alive and Backup

on:
  schedule:
    # Run every day at 03:00 UTC (adjust time as needed)
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  automate:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed to push to the backup repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies (including Playwright)
        run: npm install
        working-directory: .

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          # Ensure cache: 'pip' is removed from here if you removed it previously

      # Ensure Python dependencies are installed (only manage_git_backup needs them now)
      - name: Install Python dependencies
        run: pip install -r requirements.txt
        working-directory: .

      # --- Debugging Steps (Optional, you can keep or remove) ---
      # - name: Show Python Location
      #   run: echo "Python location: ${{ env.pythonLocation }}"
      # - name: Show requirements.txt content
      #   run: cat requirements.txt
      #   working-directory: .
      # - name: Show installed parfive version
      #   run: pip show parfive
      # --- End Debugging Steps ---


      - name: Run Playwright Server Automation (Wake & Backup)
        id: playwright_run # Add an ID to this step to access its outputs
        run: node src/start_server_playwright.js
        env:
          MINEFORT_EMAIL: ${{ secrets.MINEFORT_EMAIL }}
          MINEFORT_PASSWORD: ${{ secrets.MINEFORT_PASSWORD }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }} # This is also the server ID

      # No explicit sleep needed here if Playwright waits for backup creation/download

      - name: Upload error screenshot if playwright fails
        if: steps.playwright_run.conclusion == 'failure' # Check if the playwright step failed
        uses: actions/upload-artifact@v4
        with:
          name: playwright-error
          path: playwright_error.png # Assuming playwright_error.png is still the path
          if-no-files-found: ignore

      # --- Add the new Python step ---
      - name: Run Git Backup Manager # New step
        # Pass the downloaded file path from the playwright step's output
        run: ${{ env.pythonLocation }}/bin/python src/manage_git_backup.py ${{ steps.playwright_run.outputs.downloaded_file_path }}
        env:
          BACKUP_REPO_URL: ${{ secrets.BACKUP_REPO_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BACKUP_FOLDER_IN_REPO: ${{ secrets.BACKUP_FOLDER_IN_REPO }}
      # --- End new Python step ---
